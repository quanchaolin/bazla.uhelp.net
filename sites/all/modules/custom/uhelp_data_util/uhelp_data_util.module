<?php

define("UHELP_DATA_UTIL_PATH", "uhelp_data_util");

function uhelp_data_util_menu() {
  $items = array();
  $items[UHELP_DATA_UTIL_PATH] =
    array(
          'title' => t("UHELP Data Util"),
          'page callback'    => 'uhelp_data_util_page',
          'access arguments' => array('administer nodes'),
	  );
  return $items;
}
function uhelp_data_util_page($function = NULL) {
  $functions = array(
                     "function_tester",
		     "import_university_courses",
		     "update_student_accounts",
		     );
  $ret = "";
  if ($function && in_array($function, $functions)) {
    $html = call_user_func("uhelp_data_util_".$function);
    if ($html) {
      return $html;
    }
  }
  drupal_set_message("Warning, clicking the links could start massive DB
                     changes, you should back up the database first .");

  foreach($functions as $function) {
    $ret .= l($function, UHELP_DATA_UTIL_PATH."/".$function)."</br>";
  }
  return $ret;
}
function uhelp_data_util_function_tester() {
  dsm("hi mom!");
}

function uhelp_data_util_update_student_accounts() {
  set_time_limit(0);

  $curr = mktime();
  dsm(date('r',$curr));

  $map = uhelp_data_util_university_map();

  $row = 0;
  $csv_file = "sites/all/modules/custom/uhelp_data_util/uhelp_student_user_emails_and_names.csv";

  $data_array = array();
  $errors = array();
  if (($handle = fopen($csv_file, "r")) !== FALSE) {
    while (($data = fgetcsv($handle)) !== FALSE) {
      $row++;
      $data_array[] = $data;

      $sql = 
        "SELECT m.uf_id
         FROM civicrm_contact c
         INNER JOIN civicrm_uf_match m on c.id=m.contact_id
         WHERE lower(c.first_name) = lower('".$data[3]."')
         AND lower(c.last_name) = lower('".$data[2]."')
        ";

      unset($student);
      $result = db_query($sql)->fetchObject();
      if ($result && $result->uf_id) {
	$student = user_load($result->uf_id);
	if ($student) {
	  $student->mail = $data[0];
	  $student->name = $data[1];
	  user_save($student);
	}
      }

      if (!$student){
	$errors[] = "email: ".$data[0]." username: ".$data[1].
          " last: ".$data[2].
	  " first: ".$data[3]."<br/>";
      }
    }
  }
  drupal_set_message(implode(' ', $errors));
  //dsm($data_array);
  dsm(((mktime() - $curr)/60)." minutes update add $row users");
}


function uhelp_data_util_import_university_courses() {
  set_time_limit(0);

  $curr = mktime();
  dsm(date('r',$curr));

  $map = uhelp_data_util_university_map();

  $row = 0;
  $csv_file = "sites/all/modules/custom/uhelp_data_util/uhelp_university_courses.csv";

  $valid_courses = array();
  $undefined = array();
  $missing_fos = array();
  $field_of_studies = array();
  $missing_titles = array();
  $years = array();
  $semesters = array();
  $created_codes = array();
  $hashes = array();
  $duplicates = array();
  $short_hashes = array();
  $merges = array();

  if (($handle = fopen($csv_file, "r")) !== FALSE) {
    while (($data = fgetcsv($handle)) !== FALSE) {
      $row++;

      $hash = implode('--', $data);
      if (in_array($hash, $hashes)) {
	$duplicates[] = $data;
      }
      else {
	$hashes[] = $hash;
      }
      
      $uni = strtoupper(trim($data[0]));
      $faculty = trim($data[1]);
      $fos = trim($data[2]);
      
      $course_field_of_studies = $map[$uni][$faculty][$fos];

      if (!is_array($course_field_of_studies)) {
	$course_field_of_studies = array($course_field_of_studies);
      }

      $has_missing_fos = FALSE;
      foreach ($course_field_of_studies as $field_of_study) {
	if ($field_of_study && 
	    !in_array($field_of_study, $field_of_studies)) {
	  $result = 
	    db_query("SELECT display_name
                      FROM civicrm_contact 
                      WHERE id = $field_of_study
                      AND contact_sub_type 
                      like '%Field_of_Study%'")->fetchObject();
	  if ($result) {
	    $fos=$result->display_name;
	    $field_of_studies[$field_of_study] = $fos;
	    $data[2] = $fos;
	  }
	  else {
	    $field_of_study = 0;
	  }
	}
	
	if (!isset($field_of_study)) {
	  $undefined[] = $data;
	  continue;
	}
	else if (!$field_of_study) {
	  $index = "$uni - $faculty - $fos";
	  if (!isset($missing_fos[$index])) {
	    $missing_fos[$index] = array();
	  }
	  $missing_fos[$index][] = $hash;  
	  $has_missing_fos = TRUE;
	  continue;
	}
      }

      if ($has_missing_fos) {
	continue;
      }

      if ($data[6]) {
	$short_hash =  trim($data[0]).'--'.
	  trim($data[6]);
      }
      else {
	$short_hash =  trim($data[0]).'--'.
	  trim($data[5]);
      }

      if ($short_hashes[$short_hash]) {
	$duplicate_course_hash = $short_hashes[$short_hash];
	$valid_courses[$duplicate_course_hash]['field_of_studies'][] =
	 $field_of_study;
	if (!is_array($merges[$short_hash])) {
	  $merges[$short_hash] = array();
	}
	$merges[$short_hash][] = $hash;
	continue;
      }
      
      $short_hashes[$short_hash] = $hash;

      $course_title = $data[5];

      if (!$course_title) {
	$missing_titles[] = $data;
	continue;
      }

      $year = $data[3];
      if ($year && !isset($years[$year])) {
	$years[$year] = array();
      }
      if ($year) {
	$years[$year][] = $data;
      }

      $semester = trim($data[4]);

      if ($semester && !isset($semesters[$semester])) {
	$semesters[$semester] = array();
      }
      if ($semester) {
	$semesters[$semester][] = $data;
      }


      if ($semester == "1 et 2") {
	$semester = array(1, 2);
      }
      else if ($semester == '1,2,3') {
	$semester = array(1,2,3);
      }
      else if ($semester == '7 et 8') {
	$semester = array(1,2);
      }
      else if ($semester == '7') {
	$semester = array(1);
      }
      else if ($semester == 'n/a') {
	$semester = array();
      }
      else {
	$semester = array($semester);
      }
      
     
      
      $code = $data[6];
      if (!$code) {
	$code = uhelp_data_util_get_code($data);
	
	if (!isset($created_codes[$code])) {
	  $created_codes[$code] = array();
	}
	$created_codes[$code][] = $hash;
      }

      $valid_courses[$hash] = array(
			       'title' => $course_title,
			       'field_of_studies' => $course_field_of_studies,
			       'year' => $year,
			       'semester' => $semester,
			       'code' => $code,
			       );
    }
    fclose($handle);
  }

  $counter= 0;
  $created_exception_codes = array();
  foreach($created_codes as $code=>$values) {
    if (count($values) > 1) {
      $suffix = 1;
      foreach($values as $hash) {
	$new_code = $valid_courses[$hash]['code']."-00".$suffix;
	$valid_courses[$hash]['code'] = $new_code;
	$created_exception_codes[$new_code] = $hash;
	$suffix++;
      }
      $counter ++;
    }
  }
  /**

  dsm($map, 'field of study map');
  dsm($undefined, "Rows missing ");
  dsm($missing_fos, "No Field of Study in CiviCRM");
  dsm($missing_titles, "missing titles");
  dsm($field_of_studies, 'fs');
  dsm($duplicates, 'duplicates');
  dsm($short_hashes,'short_hashes');
  
  dsm($created_exception_codes, 'created codes that needed a "-00x" added to it to separate it from Courses that would have the same generated code because of course name similarity');

  dsm(count($valid_courses)." courses created out of $row");
  dsm($merges, 'merges');
  return;
  //dsm(array_keys($years), 'years');
  //dsm($semesters, 'semesters');
  //dsm($created_codes, 'codes');
  
  */
  $counter = 0;
  foreach($valid_courses as $course_data) {
    $counter ++;
    $course = uhelp_data_util_get_university_course_template_node();

    $course->field_uc_course_name[LANGUAGE_NONE][0]['value'] = 
      $course_data['title'];
    if ($course_data['year']) {
      $course->field_uc_yearofstudy[LANGUAGE_NONE][0]['tid'] = 
	$course_data['year'];
    }

    $index = 0;
    foreach($course_data['field_of_studies'] as $field_of_study) {
      $course->field_uc_field_of_study[LANGUAGE_NONE][$index]['contact_id'] =
	$field_of_study;
      $index ++;
    }

    $course->field_uc_code[LANGUAGE_NONE][0]['value'] = $course_data['code'];

    $index = 0;
    foreach($course_data['semester'] as $semester) {
      $course->field_uc_semester[LANGUAGE_NONE][$index]['value'] = $semester;
      $index ++;
    }
    node_save($course);
    //drupal_set_message(l($course->title,"node/".$course->nid));

    if ($counter > 2) {
      //break;
    }
  } 

  dsm(((mktime() - $curr)/60)." minutes to add $counter courses");
}

function uhelp_data_util_get_university_course_template_node() {
  $university_course_template = new stdClass();
  $university_course_template->status = 1;
  $university_course_template->comment = 0;
  $university_course_template->promote= 0;
  $university_course_template->sticky= 0;
  $university_course_template->type='university_course';
  $university_course_template->language=LANGUAGE_NONE;
  $university_course_template->tnid=0;
  $university_course_template->translate=0;
  $university_course_template->uid=2;

  return $university_course_template;
}

function uhelp_data_util_get_code($data) {
  $code = 
    uhelp_data_util_get_abbreviated_part($data[2]) .
    "-".
    uhelp_data_util_get_abbreviated_part($data[5]);

  if ($data[3]) {
    $code .= "-".$data[3];
  }

  if ($data[4] && trim($data[4]) != 'n/a') {
    if ($data[4] == '7 et 8') {
      $semester = "1&2";
    }
    else if ($data[4] == '7') {
      $semester = 1;
    }
    else {
      $semester = $data[4];
    }
    $code .= "-".$semester;
  }
  return $code;
}

function uhelp_data_util_get_abbreviated_part($string) {
  $ignores = array(
		   'et ',
		   'a ',
		   'de ',
		   'des ',
		   'de la ',
		   'du ',
		   'en ',
		   "l'",
		   );

  foreach($ignores as $search) {
    $string = str_replace($search, "", $string);
  }

  if ($string == 'Génie électromécanique') {
    return 'GE';
  }
  if ($string == 'Génie électronique') {
    return 'GE';
  }

  $expr = '/(?<=\s|^)[a-z]/i';
  preg_match_all($expr, $string, $matches);
  $string = implode('', $matches[0]);
  $string = strtoupper($string);

  return $string;
}

function uhelp_data_util_university_map() {
  $map = 
    array(
	  'UNIQ' => array(
			  'FSAE'=> array(
					 'Agro-Economie'=> 360,
					 'Agro-Environnement' => 362,
					 'Production agricole' => 361
					 ),
			  'FSEA'=> array(
					 'Gestion des Institutions financières' => 377,
					 'Gestion des Petites et Moyennes Entreprises' => 378,
					 'Sciences comptables' => 380,
					 'Sciences économiques' => 381,
					 ),
			  'FSED'=> array(
					 'Langues Vivantes' => 370,
					 "Sciences de l'education" => 393,
					 "Sciences de l'education: Administration Scolaire" => 369,
					 "Sciences de l'education: Chimie Biologie" => 373,
					 "Sciences de l'education: license specialise" => 375,
					 "Sciences de l'education: License specialise" => 375,
					 ),
			  'FSGA'=> array(
					 "Génie civil : Infrastructures" => 363,
					 "Génie électrique: Energie électrique" => 365,
					 "Génie électrique: Télécommunications" => 366,
					 "Génie industriel" => 367,
					 "Génie: Architecture" => 364,
					 ),
			  'FSJP'=> array(
					 "Sciences Juridiques" => 359,
					),
			  ),
	  'UEH' => array(
			 'FAMV' => array(
					 "Tronc commun" => 396,
					 "Ressources naturelles et environnement" => 348,
					 "Sciences et technologie des aliments" => 349,
					),
			 'FDS' => array(
					"EN/EM" => array(341,340),
					"GC/EM/AR" => array(339,340,338),
					"GC/EM/EN/AR" => array(339,341,340,338),
					"GC/EN/EM" => array(339,341,340),
					"GC/EM/EN" => array(339,340,341),
					"Genie Civil" => 339,
					"Genie Electromecanique" => 340,
					"Genie Electronique" => 341,
					"Genie electronique" => 341,
					"Génie électronique" => 341,
					"MPC" => 394,
					"Genie et MPC" => 394,
				       ),
			 'FMP' => array( 
					"Medecine" => 333,
					"Medecine/Pharmacie" => 335,
					"Pharmacie" => 334,
					 ),
			 'FO' => array(
				      "Médecine dentaire" => 336,
				      ),
			 'CTPEA' => array(
					  "Tronc commun" => 398,
					  "Statistique" => 357,
					  ),
			 ),
	  'ESIH' => array(
			  'Comptabilité - Economie - Gestion' => 
			  array(    
				"Gestion" => 385,
				"Sciences comptables" => 383,
				"Sciences de l'entreprise" => 384,
				    ),
			  'Informatique' => array(
						  "Sciences informatiques" => 382,
						  ),
			  ),
	  'UNDH' => array(
			  'ESI' => array(
					"Sciences Infirmières" => 386,
					)
			       )
	       );
  
  return $map;
}